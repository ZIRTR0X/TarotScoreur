kind: pipeline
type: docker
name: default

trigger:
  event:
    - push

steps:
  # Build solution
  - name: build
    image: mcr.microsoft.com/dotnet/sdk:6.0
    volumes:
      - name: docs
        path: /docs
    commands:
      - cd Sources/
      - dotnet restore TarotScoreur.sln
      - dotnet build TarotScoreur.sln -c Release --no-restore
      - dotnet publish TarotScoreur.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release

  # Tests solutions
  - name: tests
    image: mcr.microsoft.com/dotnet/sdk:6.0
    commands:
      - cd Sources/
      - dotnet restore TarotScoreur.sln
      - dotnet test TarotScoreur.sln --no-restore
    depends_on: [ build ]

  # Code analysis
  - name: code-analysis
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dronesonarplugin-dotnet6
    commands:
      - cd Sources/
      - dotnet restore TarotScoreur.sln
      - dotnet sonarscanner begin /k:SFJJ-TarotScoreur /d:sonar.host.url=$${PLUGIN_SONAR_HOST} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**" /d:sonar.login=$${PLUGIN_SONAR_TOKEN}
      - dotnet build TarotScoreur.sln -c Release --no-restore
      - dotnet test TarotScoreur.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
      - reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
      - dotnet publish TarotScoreur.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release
      - dotnet sonarscanner end /d:sonar.login=$${PLUGIN_SONAR_TOKEN}
    secrets: [ SECRET_SONAR_LOGIN ]
    settings:
      # accessible en ligne de commande par ${PLUGIN_SONAR_HOST}
      sonar_host: https://codefirst.iut.uca.fr/sonar/
      # accessible en ligne de commande par ${PLUGIN_SONAR_TOKEN}
      sonar_token:
        from_secret: SECRET_SONAR_LOGIN
    when:
      branch:
        - master
        - develop
    depends_on: [ tests ]

  # Documentation
  - name: generate-and-deploy-docs
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-docdeployer
    failure: ignore
    volumes:
      - name: docs
        path: /docs
    commands:
      - /entrypoint.sh
    when:
      branch:
        - master
    depends_on: [ build ]
  
  # Grpc Service
  - name: build-docker-grpc-service
    image: plugins/docker
    settings:
      dockerfile: Sources/Api/GrpcService/Dockerfile
      context: Sources/
      registry: hub.codefirst.iut.uca.fr
      repo: hub.codefirst.iut.uca.fr/jordan.artzet/sfjj-tarotscoreur
      username:
        from_secret: SECRET_REGISTRY_USERNAME
      password:
        from_secret: SECRET_REGISTRY_PASSWORD
    depends_on: [ build ]

  - name: deploy-grpc-container
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
    environment:
      IMAGENAME: hub.codefirst.iut.uca.fr/jordan.artzet/sfjj-tarotscoreur
      CONTAINERNAME: tarot-grpc-service
      COMMAND: create
      OVERWRITE: true
      ADMINS: florentmarques,samuelsirven,julientheme
    depends_on: [ build-docker-grpc-service ]
  
  # Rest Service
  - name: build-docker-rest-service
    image: plugins/docker
    settings:
      dockerfile: Sources/Api/RestController/Dockerfile
      context: Sources/
      registry: hub.codefirst.iut.uca.fr
      repo: hub.codefirst.iut.uca.fr/jordan.artzet/sfjj-tarotscoreur
      username:
        from_secret: SECRET_REGISTRY_USERNAME
      password:
        from_secret: SECRET_REGISTRY_PASSWORD
    depends_on: [ build ]

  - name: deploy-rest-container
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
    environment:
      IMAGENAME: hub.codefirst.iut.uca.fr/jordan.artzet/sfjj-tarotscoreur
      CONTAINERNAME: tarot-rest-service
      COMMAND: create
      OVERWRITE: true
      ADMINS: florentmarques,samuelsirven,julientheme
    depends_on: [ build-docker-rest-service ]

volumes:
  - name: docs
    temp: { }